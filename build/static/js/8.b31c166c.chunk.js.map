{"version":3,"sources":["components/Projects/Card.js","content/projects.js","components/Projects/index.js"],"names":["Card","tech","title","kind","description","link","linkTitle","StyledCard","variant","CardContent","Tech","gutterBottom","Typography","component","Kind","CardActions","size","href","target","rel","styled","MuiCard","theme","colors","subtext","Button","MuiButton","primary","projects","withParallaxLayer","H1","container","spacing","justify","map","i","item","xs","sm","md","h1","fonts","sectionTitle","Grid","MuiGrid"],"mappings":"wpBAuBA,IA0CeA,EA1CF,SAAC,GAAyD,IAAvDC,EAAsD,EAAtDA,KAAMC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,KAAMC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACpD,OACE,cAACC,EAAD,CAAYC,QAAQ,WAApB,SACE,oCACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAD,CAAMC,cAAY,EAAlB,SAAoBV,IAEpB,cAACW,EAAA,EAAD,CAAYJ,QAAQ,KAAKK,UAAU,KAAnC,SACGX,IAGH,cAACY,EAAD,UAAOX,IAEP,cAACS,EAAA,EAAD,CAAYJ,QAAQ,QAAQK,UAAU,MAAtC,SACE,cAAC,IAAD,UAAgBT,SAIpB,cAACW,EAAA,EAAD,UACE,cAAC,EAAD,CACEP,QAAQ,WACRQ,KAAK,QACLC,KAAMZ,EACNa,OAAO,SACPC,IAAI,sBALN,SAOGb,YAkBPC,EAAaa,YAAOC,IAAPD,CAAH,KAIVV,EAAOU,YAAOR,IAAPQ,CAAH,KAEC,qBAAGE,MAAkBC,OAAOC,WAGjCV,EAAOM,YAAOR,IAAPQ,CAAH,KAEC,qBAAGE,MAAkBC,OAAOC,WAGjCC,EAASL,YAAOM,IAAPN,CAAH,KACU,qBAAGE,MAAkBC,OAAOI,WACvC,qBAAGL,MAAkBC,OAAOI,WCnF1BC,EAAW,CACtB,CACE1B,MAAO,iCACPD,KAAM,wBACNE,KAAM,qEACNC,YAAY,8dAMZC,KAAM,yEACNC,UAAU,gBAEZ,CACEJ,MAAO,SACPD,KAAM,SACNE,KAAM,mBACNC,YAAY,ifAOZC,KAAM,GACNC,UAAU,iB,8PCeCuB,uBAxBE,WACf,OACE,oCACE,cAACC,EAAD,0BAEA,cAAC,EAAD,CAAMC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAApC,SAEGL,EAASM,KAAI,WAAsDC,GAAtD,IAAGjC,EAAH,EAAGA,MAAOD,EAAV,EAAUA,KAAME,EAAhB,EAAgBA,KAAMC,EAAtB,EAAsBA,YAAaC,EAAnC,EAAmCA,KAAMC,EAAzC,EAAyCA,UAAzC,OACZ,cAAC,EAAD,CAAM8B,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAA9B,SACE,cAAC,EAAD,CACErC,MAAOA,EACPD,KAAMA,EACNE,KAAMA,EACNC,YAAaA,EACbC,KAAMA,EACNC,UAAWA,KAPf,kBAAiDJ,EAAjD,YAA0DiC,eARpE,IA0BML,EAAKV,IAAOoB,GAAV,KACG,qBAAGlB,MAAkBC,OAAOrB,SAExB,qBAAGoB,MAAkBmB,MAAMzB,KAAK0B,gBAGzCC,EAAOvB,YAAOwB,IAAPxB,CAAH","file":"static/js/8.b31c166c.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport MuiCard from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport MuiButton from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport ReactMarkdown from 'react-markdown'\n\n/**\n * Displays a project in a card\n *\n * @component\n * @example\n * <Card\n *   tech='Python'\n *   title='Awesome title'\n *   kind='ML Engineering'\n *   description=\"It's an awesome project !\"\n *   link='https://awesome-project.url'\n *   linkTitle='Project homepage'\n * />\n */\nconst Card = ({ tech, title, kind, description, link, linkTitle }) => {\n  return (\n    <StyledCard variant=\"outlined\">\n      <article>\n        <CardContent>\n          <Tech gutterBottom>{tech}</Tech>\n\n          <Typography variant=\"h5\" component=\"h2\">\n            {title}\n          </Typography>\n\n          <Kind>{kind}</Kind>\n\n          <Typography variant=\"body2\" component=\"div\">\n            <ReactMarkdown>{description}</ReactMarkdown>\n          </Typography>\n        </CardContent>\n\n        <CardActions>\n          <Button\n            variant=\"outlined\"\n            size=\"small\"\n            href={link}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            {linkTitle}\n          </Button>\n        </CardActions>\n      </article>\n    </StyledCard>\n  )\n}\n\nCard.propTypes = {\n  tech: PropTypes.string,\n  title: PropTypes.string.isRequired,\n  kind: PropTypes.string,\n  description: PropTypes.string.isRequired,\n  link: PropTypes.string,\n}\n\nexport default Card\n\nconst StyledCard = styled(MuiCard)`\n  min-width: 200px;\n`\n\nconst Tech = styled(Typography)`\n  font-size: 14px;\n  color: ${({ theme }) => theme.colors.subtext};\n`\n\nconst Kind = styled(Typography)`\n  margin-bottom: 12px;\n  color: ${({ theme }) => theme.colors.subtext};\n`\n\nconst Button = styled(MuiButton)`\n  border: 1px solid ${({ theme }) => theme.colors.primary};\n  color: ${({ theme }) => theme.colors.primary};\n`\n","export const projects = [\n  {\n    title: 'Acute Kidney Injury Prediction',\n    tech: 'Python, XGBoost, Shap',\n    kind: 'High dimension classication using structured and unstructured data',\n    description: `\nThe goal was to develop a model with a similar approach as those presented\nin state of the art papers for this disease and to enhance it using nlp. \nThe dataset used was based on the *MIMIC* database and composed of 20742 adult patients with **more than 100000 features**. \nOur best model is based on *XGBoost* and has an auroc score of **86.5%** 24 hours before the event.\nA second objective was **model explainability** and **real-time analysis of the predictions**. `,\n    link: 'https://github.com/AymericBasset/Acute_Kidney_Injury_Prediction_In_ICU',\n    linkTitle: `Project page`,\n  },\n  {\n    title: 'Others',\n    tech: 'Python',\n    kind: 'work in progress',\n    description: `\nI'm currently working on getting as much of my work available on github. This is to avoid non-disclosure agreement issues and polish my repositories. \nPlease make sure to check back later or contact me directly to talk more about the rest of my projects!\nI will be adding soon (non-exaustive): Gan research on financial time series, Reiforcement Learning game engine, Tool for imputation of missing values in large industrial databases,\nWeb scrapping tool for health related topics ...\n\n`,\n    link: '',\n    linkTitle: `Project page`,\n  },\n]","import { Grid as MuiGrid } from '@material-ui/core'\nimport styled from 'styled-components'\n\nimport Card from './Card'\nimport { projects } from '../../content/projects'\nimport withParallaxLayer from '../../HOC/withParallaxLayer'\n\n/**\n * Projects section\n *\n * @component\n * @example\n * <Projects>\n *   <Project1 />\n *   <Project2 />\n * </Projects>\n */\nconst Projects = () => {\n  return (\n    <section>\n      <H1>My Projects</H1>\n\n      <Grid container spacing={4} justify=\"center\">\n\n        {projects.map(({ title, tech, kind, description, link, linkTitle }, i) => (\n          <Grid item xs={12} sm={6} md={4} key={`project-${title}-${i}`}>\n            <Card\n              title={title}\n              tech={tech}\n              kind={kind}\n              description={description}\n              link={link}\n              linkTitle={linkTitle}\n            />\n          </Grid>\n        ))}\n      </Grid>\n    </section>\n  )\n}\n\nexport default withParallaxLayer(Projects)\n\nconst H1 = styled.h1`\n  color: ${({ theme }) => theme.colors.title};\n  text-align: center;\n  font-size: ${({ theme }) => theme.fonts.size.sectionTitle};\n`\n\nconst Grid = styled(MuiGrid)`\n  padding-left: 40px;\n  padding-right: 40px;\n`\n"],"sourceRoot":""}