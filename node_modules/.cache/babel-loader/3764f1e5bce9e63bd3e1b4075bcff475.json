{"ast":null,"code":"/**\n * Find the intruder among 2 arrays\n *\n * @param {string[] | number[]} array1\n * @param {string[] | number[]} array2\n */\nexport const arraysDiff = (array1, array2) => {\n  const intruder = [];\n  array1 = array1.map(Number);\n  array2 = array2.map(Number);\n\n  for (let i in array1) {\n    if (array2.indexOf(array1[i]) === -1) intruder.push(array1[i]);\n  }\n\n  for (let i in array2) {\n    if (array1.indexOf(array2[i]) === -1) intruder.push(array2[i]);\n  }\n\n  return intruder.sort((a, b) => a - b);\n};\n/**\n * return all the object's properties in float number\n *  \n * @param {object} obj\n * @param {number} digit\n */\n\nexport const toFixed = (obj, digit) => {\n  for (const key in obj) {\n    obj[key] = parseFloat(obj[key].toFixed(digit));\n  }\n\n  return obj;\n};","map":{"version":3,"sources":["/home/aymeric/Desktop/test_port/AymericBasset.github.io/src/utils/index.js"],"names":["arraysDiff","array1","array2","intruder","map","Number","i","indexOf","push","sort","a","b","toFixed","obj","digit","key","parseFloat"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,UAAU,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoB;AAC5C,QAAMC,QAAQ,GAAG,EAAjB;AACAF,EAAAA,MAAM,GAAGA,MAAM,CAACG,GAAP,CAAWC,MAAX,CAAT;AACAH,EAAAA,MAAM,GAAGA,MAAM,CAACE,GAAP,CAAWC,MAAX,CAAT;;AAEA,OAAK,IAAIC,CAAT,IAAcL,MAAd,EAAsB;AACpB,QAAIC,MAAM,CAACK,OAAP,CAAeN,MAAM,CAACK,CAAD,CAArB,MAA8B,CAAC,CAAnC,EAAsCH,QAAQ,CAACK,IAAT,CAAcP,MAAM,CAACK,CAAD,CAApB;AACvC;;AACD,OAAK,IAAIA,CAAT,IAAcJ,MAAd,EAAsB;AACpB,QAAID,MAAM,CAACM,OAAP,CAAeL,MAAM,CAACI,CAAD,CAArB,MAA8B,CAAC,CAAnC,EAAsCH,QAAQ,CAACK,IAAT,CAAcN,MAAM,CAACI,CAAD,CAApB;AACvC;;AACD,SAAOH,QAAQ,CAACM,IAAT,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAA5B,CAAP;AACD,CAZM;AAcP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,OAAO,GAAG,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACrC,OAAK,MAAMC,GAAX,IAAkBF,GAAlB,EAAuB;AACrBA,IAAAA,GAAG,CAACE,GAAD,CAAH,GAAWC,UAAU,CAACH,GAAG,CAACE,GAAD,CAAH,CAASH,OAAT,CAAiBE,KAAjB,CAAD,CAArB;AACD;;AACD,SAAOD,GAAP;AACD,CALM","sourcesContent":["/**\n * Find the intruder among 2 arrays\n *\n * @param {string[] | number[]} array1\n * @param {string[] | number[]} array2\n */\nexport const arraysDiff = (array1, array2) => {\n  const intruder = []\n  array1 = array1.map(Number)\n  array2 = array2.map(Number)\n\n  for (let i in array1) {\n    if (array2.indexOf(array1[i]) === -1) intruder.push(array1[i])\n  }\n  for (let i in array2) {\n    if (array1.indexOf(array2[i]) === -1) intruder.push(array2[i])\n  }\n  return intruder.sort((a, b) => a - b)\n}\n\n/**\n * return all the object's properties in float number\n *  \n * @param {object} obj\n * @param {number} digit\n */\nexport const toFixed = (obj, digit) => {\n  for (const key in obj) {\n    obj[key] = parseFloat(obj[key].toFixed(digit))\n  }\n  return obj\n}\n"]},"metadata":{},"sourceType":"module"}