{"ast":null,"code":"import _slicedToArray from\"/home/aymeric/Desktop/test_port/AymericBasset.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _toConsumableArray from\"/home/aymeric/Desktop/test_port/AymericBasset.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{useReducer}from'react';import{config}from'../config/sizes';import useWindowSize from'./useWindowSize';import{arraysDiff}from'../utils';/**\n * Makes a resizing of the sections below Skills and \n * the whole page when skills are expand or collapsed\n */export var useSkillSizing=function useSkillSizing(){var lines=config.lines,multiplier=config.multiplier;var _useWindowSize=useWindowSize(),deviceType=_useWindowSize.deviceType;var screenOption=deviceType==='smallPhone'?0.02:0;var reducer=function reducer(state,nodes){var newState=JSON.parse(JSON.stringify(state));var collapsed=arraysDiff(newState.activeView,nodes);var collapsedLines=0;collapsed.forEach(function(node){collapsedLines+=lines[node];});var factor=multiplier*collapsedLines;factor.toFixed(2);var action=nodes.length>state.activeView.length?'increase':'decrease';newState.activeView=_toConsumableArray(nodes);switch(action){case'increase':newState.resize=parseFloat(factor.toFixed(2));return newState;case'decrease':if(collapsed[0]===1){collapsedLines=0;nodes.forEach(function(node){collapsedLines+=lines[Number(node)];});factor=(multiplier-screenOption)*collapsedLines;factor.toFixed(2);newState.activeView=[];}newState.resize=-parseFloat(factor.toFixed(2));return newState;default:break;}};var initialState={activeView:[],resize:0};var _useReducer=useReducer(reducer,initialState),_useReducer2=_slicedToArray(_useReducer,2),skillSizing=_useReducer2[0],setSkillSizing=_useReducer2[1];return[skillSizing,setSkillSizing];};","map":{"version":3,"sources":["/home/aymeric/Desktop/test_port/AymericBasset.github.io/src/hooks/useSkillSizing.js"],"names":["useReducer","config","useWindowSize","arraysDiff","useSkillSizing","lines","multiplier","deviceType","screenOption","reducer","state","nodes","newState","JSON","parse","stringify","collapsed","activeView","collapsedLines","forEach","node","factor","toFixed","action","length","resize","parseFloat","Number","initialState","skillSizing","setSkillSizing"],"mappings":"oWAAA,OAASA,UAAT,KAA2B,OAA3B,CACA,OAASC,MAAT,KAAuB,iBAAvB,CACA,MAAOC,CAAAA,aAAP,KAA0B,iBAA1B,CACA,OAASC,UAAT,KAA2B,UAA3B,CAGA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,cAAc,CAAG,QAAjBA,CAAAA,cAAiB,EAAM,IAC1BC,CAAAA,KAD0B,CACJJ,MADI,CAC1BI,KAD0B,CACnBC,UADmB,CACJL,MADI,CACnBK,UADmB,oBAEXJ,aAAa,EAFF,CAE1BK,UAF0B,gBAE1BA,UAF0B,CAIlC,GAAIC,CAAAA,YAAY,CAAGD,UAAU,GAAK,YAAf,CAA8B,IAA9B,CAAqC,CAAxD,CAEA,GAAME,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAQC,KAAR,CAAkB,CAChC,GAAIC,CAAAA,QAAQ,CAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,KAAf,CAAX,CAAf,CACA,GAAMM,CAAAA,SAAS,CAAGb,UAAU,CAACS,QAAQ,CAACK,UAAV,CAAsBN,KAAtB,CAA5B,CACA,GAAIO,CAAAA,cAAc,CAAG,CAArB,CAEAF,SAAS,CAACG,OAAV,CAAkB,SAAAC,IAAI,CAAI,CACxBF,cAAc,EAAIb,KAAK,CAACe,IAAD,CAAvB,CACD,CAFD,EAIA,GAAIC,CAAAA,MAAM,CAAGf,UAAU,CAAIY,cAA3B,CACAG,MAAM,CAACC,OAAP,CAAe,CAAf,EAEA,GAAMC,CAAAA,MAAM,CACVZ,KAAK,CAACa,MAAN,CAAed,KAAK,CAACO,UAAN,CAAiBO,MAAhC,CAAyC,UAAzC,CAAsD,UADxD,CAEAZ,QAAQ,CAACK,UAAT,oBAA0BN,KAA1B,EAEA,OAAQY,MAAR,EAEE,IAAK,UAAL,CACEX,QAAQ,CAACa,MAAT,CAAkBC,UAAU,CAACL,MAAM,CAACC,OAAP,CAAe,CAAf,CAAD,CAA5B,CACA,MAAOV,CAAAA,QAAP,CAEF,IAAK,UAAL,CACE,GAAII,SAAS,CAAC,CAAD,CAAT,GAAiB,CAArB,CAAwB,CACtBE,cAAc,CAAG,CAAjB,CACAP,KAAK,CAACQ,OAAN,CAAc,SAAAC,IAAI,CAAI,CACpBF,cAAc,EAAIb,KAAK,CAACsB,MAAM,CAACP,IAAD,CAAP,CAAvB,CACD,CAFD,EAGAC,MAAM,CAAG,CAACf,UAAU,CAAGE,YAAd,EAA8BU,cAAvC,CACAG,MAAM,CAACC,OAAP,CAAe,CAAf,EACAV,QAAQ,CAACK,UAAT,CAAsB,EAAtB,CACD,CACDL,QAAQ,CAACa,MAAT,CAAkB,CAACC,UAAU,CAACL,MAAM,CAACC,OAAP,CAAe,CAAf,CAAD,CAA7B,CACA,MAAOV,CAAAA,QAAP,CAEF,QACE,MApBJ,CAsBD,CAtCD,CAwCA,GAAMgB,CAAAA,YAAY,CAAG,CACnBX,UAAU,CAAE,EADO,CAEnBQ,MAAM,CAAE,CAFW,CAArB,CA9CkC,gBAmDIzB,UAAU,CAACS,OAAD,CAAUmB,YAAV,CAnDd,4CAmD3BC,WAnD2B,iBAmDdC,cAnDc,iBAqDlC,MAAO,CAAED,WAAF,CAAeC,cAAf,CAAP,CACD,CAtDM","sourcesContent":["import { useReducer } from 'react'\nimport { config } from '../config/sizes'\nimport useWindowSize from './useWindowSize'\nimport { arraysDiff } from '../utils'\n\n\n/**\n * Makes a resizing of the sections below Skills and \n * the whole page when skills are expand or collapsed\n */\nexport const useSkillSizing = () => {\n  const { lines, multiplier } = config\n  const { deviceType } = useWindowSize()\n\n  let screenOption = deviceType === 'smallPhone' ? 0.02 : 0\n\n  const reducer = (state, nodes) => {\n    let newState = JSON.parse(JSON.stringify(state))\n    const collapsed = arraysDiff(newState.activeView, nodes)\n    let collapsedLines = 0\n\n    collapsed.forEach(node => {\n      collapsedLines += lines[node]\n    })\n\n    let factor = multiplier  * collapsedLines\n    factor.toFixed(2)\n\n    const action =\n      nodes.length > state.activeView.length ? 'increase' : 'decrease'\n    newState.activeView = [...nodes]\n\n    switch (action) {\n\n      case 'increase':\n        newState.resize = parseFloat(factor.toFixed(2))\n        return newState\n\n      case 'decrease':\n        if (collapsed[0] === 1) {\n          collapsedLines = 0\n          nodes.forEach(node => {\n            collapsedLines += lines[Number(node)]\n          })\n          factor = (multiplier - screenOption) * collapsedLines\n          factor.toFixed(2)\n          newState.activeView = []\n        }\n        newState.resize = -parseFloat(factor.toFixed(2))\n        return newState\n\n      default:\n        break\n    }\n  }\n\n  const initialState = {\n    activeView: [],\n    resize: 0,\n  }\n\n  const [skillSizing, setSkillSizing] = useReducer(reducer, initialState)\n\n  return [ skillSizing, setSkillSizing ]\n}\n"]},"metadata":{},"sourceType":"module"}