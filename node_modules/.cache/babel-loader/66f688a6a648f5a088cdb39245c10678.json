{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/aymeric/Documents/GitHub/AymericBasset.github.io/src/HOC/withLazyLoading.js\";\nimport { Suspense } from 'react';\nimport PropTypes from 'prop-types';\n/**\n * High Order Component wich wraps with a Suspense component \n * for lazy loading purpose\n * \n * @component\n * @param {JSX.Element} WrappedComponent\n * @example\n * withLazyLoading(SectionComponent)\n */\n\nconst withLazyLoading = WrappedComponent => ({ ...props\n}) => {\n  return /*#__PURE__*/_jsxDEV(Suspense, {\n    fallback: /*#__PURE__*/_jsxDEV(\"span\", {\n      hidden: true,\n      children: \".\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 25\n    }, this),\n    children: /*#__PURE__*/_jsxDEV(WrappedComponent, { ...props\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n};\n\nwithLazyLoading.propTypes = {\n  WrappedComponent: PropTypes.element.isRequired\n};\nexport default withLazyLoading;","map":{"version":3,"sources":["/home/aymeric/Documents/GitHub/AymericBasset.github.io/src/HOC/withLazyLoading.js"],"names":["Suspense","PropTypes","withLazyLoading","WrappedComponent","props","propTypes","element","isRequired"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,eAAe,GAAGC,gBAAgB,IAAI,CAAC,EAAC,GAAGC;AAAJ,CAAD,KAAgB;AAC1D,sBACE,QAAC,QAAD;AAAU,IAAA,QAAQ,eAAE;AAAM,MAAA,MAAM,MAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAApB;AAAA,2BACE,QAAC,gBAAD,OAAsBA;AAAtB;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAND;;AAQAF,eAAe,CAACG,SAAhB,GAA4B;AAC1BF,EAAAA,gBAAgB,EAAEF,SAAS,CAACK,OAAV,CAAkBC;AADV,CAA5B;AAIA,eAAeL,eAAf","sourcesContent":["import { Suspense } from 'react'\nimport PropTypes from 'prop-types'\n\n/**\n * High Order Component wich wraps with a Suspense component \n * for lazy loading purpose\n * \n * @component\n * @param {JSX.Element} WrappedComponent\n * @example\n * withLazyLoading(SectionComponent)\n */\nconst withLazyLoading = WrappedComponent => ({...props}) => {\n  return (\n    <Suspense fallback={<span hidden>.</span>}>\n      <WrappedComponent {...props}/>\n    </Suspense>\n  )\n}\n\nwithLazyLoading.propTypes = {\n  WrappedComponent: PropTypes.element.isRequired,\n}\n\nexport default withLazyLoading\n"]},"metadata":{},"sourceType":"module"}