{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from 'react';\nimport { config } from '../config/sizes';\nimport useWindowSize from './useWindowSize';\nimport { arraysDiff } from '../utils';\n/**\n * Makes a resizing of the sections below Skills and \n * the whole page when skills are expand or collapsed\n */\n\nexport const useSkillSizing = () => {\n  _s();\n\n  const {\n    lines,\n    multiplier\n  } = config;\n  const {\n    deviceType\n  } = useWindowSize();\n  let screenOption = deviceType === 'smallPhone' ? 0.02 : 0;\n\n  const reducer = (state, nodes) => {\n    let newState = JSON.parse(JSON.stringify(state));\n    const collapsed = arraysDiff(newState.activeView, nodes);\n    let collapsedLines = 0;\n    collapsed.forEach(node => {\n      collapsedLines += lines[node];\n    });\n    let factor = multiplier * collapsedLines;\n    factor.toFixed(2);\n    const action = nodes.length > state.activeView.length ? 'increase' : 'decrease';\n    newState.activeView = [...nodes];\n\n    switch (action) {\n      case 'increase':\n        newState.resize = parseFloat(factor.toFixed(2));\n        return newState;\n\n      case 'decrease':\n        if (collapsed[0] === 1) {\n          collapsedLines = 0;\n          nodes.forEach(node => {\n            collapsedLines += lines[Number(node)];\n          });\n          factor = (multiplier - screenOption) * collapsedLines;\n          factor.toFixed(2);\n          newState.activeView = [];\n        }\n\n        newState.resize = -parseFloat(factor.toFixed(2));\n        return newState;\n\n      default:\n        break;\n    }\n  };\n\n  const initialState = {\n    activeView: [],\n    resize: 0\n  };\n  const [skillSizing, setSkillSizing] = useReducer(reducer, initialState);\n  return [skillSizing, setSkillSizing];\n};\n\n_s(useSkillSizing, \"rbEtFoAEeR7v5k6lb9LklkppgtM=\", false, function () {\n  return [useWindowSize];\n});","map":{"version":3,"sources":["/home/aymeric/Desktop/test_port/AymericBasset.github.io/src/hooks/useSkillSizing.js"],"names":["useReducer","config","useWindowSize","arraysDiff","useSkillSizing","lines","multiplier","deviceType","screenOption","reducer","state","nodes","newState","JSON","parse","stringify","collapsed","activeView","collapsedLines","forEach","node","factor","toFixed","action","length","resize","parseFloat","Number","initialState","skillSizing","setSkillSizing"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,SAASC,UAAT,QAA2B,UAA3B;AAGA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,cAAc,GAAG,MAAM;AAAA;;AAClC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAwBL,MAA9B;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAiBL,aAAa,EAApC;AAEA,MAAIM,YAAY,GAAGD,UAAU,KAAK,YAAf,GAA8B,IAA9B,GAAqC,CAAxD;;AAEA,QAAME,OAAO,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAChC,QAAIC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,KAAf,CAAX,CAAf;AACA,UAAMM,SAAS,GAAGb,UAAU,CAACS,QAAQ,CAACK,UAAV,EAAsBN,KAAtB,CAA5B;AACA,QAAIO,cAAc,GAAG,CAArB;AAEAF,IAAAA,SAAS,CAACG,OAAV,CAAkBC,IAAI,IAAI;AACxBF,MAAAA,cAAc,IAAIb,KAAK,CAACe,IAAD,CAAvB;AACD,KAFD;AAIA,QAAIC,MAAM,GAAGf,UAAU,GAAIY,cAA3B;AACAG,IAAAA,MAAM,CAACC,OAAP,CAAe,CAAf;AAEA,UAAMC,MAAM,GACVZ,KAAK,CAACa,MAAN,GAAed,KAAK,CAACO,UAAN,CAAiBO,MAAhC,GAAyC,UAAzC,GAAsD,UADxD;AAEAZ,IAAAA,QAAQ,CAACK,UAAT,GAAsB,CAAC,GAAGN,KAAJ,CAAtB;;AAEA,YAAQY,MAAR;AAEE,WAAK,UAAL;AACEX,QAAAA,QAAQ,CAACa,MAAT,GAAkBC,UAAU,CAACL,MAAM,CAACC,OAAP,CAAe,CAAf,CAAD,CAA5B;AACA,eAAOV,QAAP;;AAEF,WAAK,UAAL;AACE,YAAII,SAAS,CAAC,CAAD,CAAT,KAAiB,CAArB,EAAwB;AACtBE,UAAAA,cAAc,GAAG,CAAjB;AACAP,UAAAA,KAAK,CAACQ,OAAN,CAAcC,IAAI,IAAI;AACpBF,YAAAA,cAAc,IAAIb,KAAK,CAACsB,MAAM,CAACP,IAAD,CAAP,CAAvB;AACD,WAFD;AAGAC,UAAAA,MAAM,GAAG,CAACf,UAAU,GAAGE,YAAd,IAA8BU,cAAvC;AACAG,UAAAA,MAAM,CAACC,OAAP,CAAe,CAAf;AACAV,UAAAA,QAAQ,CAACK,UAAT,GAAsB,EAAtB;AACD;;AACDL,QAAAA,QAAQ,CAACa,MAAT,GAAkB,CAACC,UAAU,CAACL,MAAM,CAACC,OAAP,CAAe,CAAf,CAAD,CAA7B;AACA,eAAOV,QAAP;;AAEF;AACE;AApBJ;AAsBD,GAtCD;;AAwCA,QAAMgB,YAAY,GAAG;AACnBX,IAAAA,UAAU,EAAE,EADO;AAEnBQ,IAAAA,MAAM,EAAE;AAFW,GAArB;AAKA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgC9B,UAAU,CAACS,OAAD,EAAUmB,YAAV,CAAhD;AAEA,SAAO,CAAEC,WAAF,EAAeC,cAAf,CAAP;AACD,CAtDM;;GAAM1B,c;UAEYF,a","sourcesContent":["import { useReducer } from 'react'\nimport { config } from '../config/sizes'\nimport useWindowSize from './useWindowSize'\nimport { arraysDiff } from '../utils'\n\n\n/**\n * Makes a resizing of the sections below Skills and \n * the whole page when skills are expand or collapsed\n */\nexport const useSkillSizing = () => {\n  const { lines, multiplier } = config\n  const { deviceType } = useWindowSize()\n\n  let screenOption = deviceType === 'smallPhone' ? 0.02 : 0\n\n  const reducer = (state, nodes) => {\n    let newState = JSON.parse(JSON.stringify(state))\n    const collapsed = arraysDiff(newState.activeView, nodes)\n    let collapsedLines = 0\n\n    collapsed.forEach(node => {\n      collapsedLines += lines[node]\n    })\n\n    let factor = multiplier  * collapsedLines\n    factor.toFixed(2)\n\n    const action =\n      nodes.length > state.activeView.length ? 'increase' : 'decrease'\n    newState.activeView = [...nodes]\n\n    switch (action) {\n\n      case 'increase':\n        newState.resize = parseFloat(factor.toFixed(2))\n        return newState\n\n      case 'decrease':\n        if (collapsed[0] === 1) {\n          collapsedLines = 0\n          nodes.forEach(node => {\n            collapsedLines += lines[Number(node)]\n          })\n          factor = (multiplier - screenOption) * collapsedLines\n          factor.toFixed(2)\n          newState.activeView = []\n        }\n        newState.resize = -parseFloat(factor.toFixed(2))\n        return newState\n\n      default:\n        break\n    }\n  }\n\n  const initialState = {\n    activeView: [],\n    resize: 0,\n  }\n\n  const [skillSizing, setSkillSizing] = useReducer(reducer, initialState)\n\n  return [ skillSizing, setSkillSizing ]\n}\n"]},"metadata":{},"sourceType":"module"}