{"ast":null,"code":"/**\n * Find the intruder among 2 arrays\n *\n * @param {string[] | number[]} array1\n * @param {string[] | number[]} array2\n */export var arraysDiff=function arraysDiff(array1,array2){var intruder=[];array1=array1.map(Number);array2=array2.map(Number);for(var i in array1){if(array2.indexOf(array1[i])===-1)intruder.push(array1[i]);}for(var _i in array2){if(array1.indexOf(array2[_i])===-1)intruder.push(array2[_i]);}return intruder.sort(function(a,b){return a-b;});};/**\n * return all the object's properties in float number\n *  \n * @param {object} obj\n * @param {number} digit\n */export var toFixed=function toFixed(obj,digit){for(var key in obj){obj[key]=parseFloat(obj[key].toFixed(digit));}return obj;};","map":{"version":3,"sources":["/home/aymeric/Desktop/test_port/AymericBasset.github.io/src/utils/index.js"],"names":["arraysDiff","array1","array2","intruder","map","Number","i","indexOf","push","sort","a","b","toFixed","obj","digit","key","parseFloat"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMA,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,MAAD,CAASC,MAAT,CAAoB,CAC5C,GAAMC,CAAAA,QAAQ,CAAG,EAAjB,CACAF,MAAM,CAAGA,MAAM,CAACG,GAAP,CAAWC,MAAX,CAAT,CACAH,MAAM,CAAGA,MAAM,CAACE,GAAP,CAAWC,MAAX,CAAT,CAEA,IAAK,GAAIC,CAAAA,CAAT,GAAcL,CAAAA,MAAd,CAAsB,CACpB,GAAIC,MAAM,CAACK,OAAP,CAAeN,MAAM,CAACK,CAAD,CAArB,IAA8B,CAAC,CAAnC,CAAsCH,QAAQ,CAACK,IAAT,CAAcP,MAAM,CAACK,CAAD,CAApB,EACvC,CACD,IAAK,GAAIA,CAAAA,EAAT,GAAcJ,CAAAA,MAAd,CAAsB,CACpB,GAAID,MAAM,CAACM,OAAP,CAAeL,MAAM,CAACI,EAAD,CAArB,IAA8B,CAAC,CAAnC,CAAsCH,QAAQ,CAACK,IAAT,CAAcN,MAAM,CAACI,EAAD,CAApB,EACvC,CACD,MAAOH,CAAAA,QAAQ,CAACM,IAAT,CAAc,SAACC,CAAD,CAAIC,CAAJ,QAAUD,CAAAA,CAAC,CAAGC,CAAd,EAAd,CAAP,CACD,CAZM,CAcP;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,IAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,GAAD,CAAMC,KAAN,CAAgB,CACrC,IAAK,GAAMC,CAAAA,GAAX,GAAkBF,CAAAA,GAAlB,CAAuB,CACrBA,GAAG,CAACE,GAAD,CAAH,CAAWC,UAAU,CAACH,GAAG,CAACE,GAAD,CAAH,CAASH,OAAT,CAAiBE,KAAjB,CAAD,CAArB,CACD,CACD,MAAOD,CAAAA,GAAP,CACD,CALM","sourcesContent":["/**\n * Find the intruder among 2 arrays\n *\n * @param {string[] | number[]} array1\n * @param {string[] | number[]} array2\n */\nexport const arraysDiff = (array1, array2) => {\n  const intruder = []\n  array1 = array1.map(Number)\n  array2 = array2.map(Number)\n\n  for (let i in array1) {\n    if (array2.indexOf(array1[i]) === -1) intruder.push(array1[i])\n  }\n  for (let i in array2) {\n    if (array1.indexOf(array2[i]) === -1) intruder.push(array2[i])\n  }\n  return intruder.sort((a, b) => a - b)\n}\n\n/**\n * return all the object's properties in float number\n *  \n * @param {object} obj\n * @param {number} digit\n */\nexport const toFixed = (obj, digit) => {\n  for (const key in obj) {\n    obj[key] = parseFloat(obj[key].toFixed(digit))\n  }\n  return obj\n}\n"]},"metadata":{},"sourceType":"module"}