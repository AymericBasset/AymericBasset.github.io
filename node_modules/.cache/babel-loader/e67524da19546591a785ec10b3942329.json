{"ast":null,"code":"import _slicedToArray from\"/home/aymeric/Desktop/test_port/AymericBasset.github.io/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";import{breakpoints}from\"../styles/theme\";/**\n * Get the window height and width even when those sizes are changing\n */var useWindowSize=function useWindowSize(){var _useState=useState(undefined),_useState2=_slicedToArray(_useState,2),windowWidth=_useState2[0],setWidth=_useState2[1];var _useState3=useState(undefined),_useState4=_slicedToArray(_useState3,2),windowHeight=_useState4[0],setHeight=_useState4[1];var _useState5=useState('desktop'),_useState6=_slicedToArray(_useState5,2),deviceType=_useState6[0],setWindowType=_useState6[1];useEffect(function(){var getSize=function getSize(){var _ref=[window.innerWidth,window.innerHeight],width=_ref[0],height=_ref[1];var startBigPhone=breakpoints.startBigPhone,startTablet=breakpoints.startTablet,startDesktop=breakpoints.startDesktop;setWidth(width);setHeight(height);if(width<startBigPhone){setWindowType('smallPhone');}else if(width<startTablet){setWindowType('bigPhone');}else if(width<startDesktop){setWindowType('tablet');}};window.addEventListener('resize',getSize);getSize();return function(){window.removeEventListener('resize',getSize);};},[]);return{windowWidth:windowWidth,windowHeight:windowHeight,deviceType:deviceType};};export default useWindowSize;","map":{"version":3,"sources":["/home/aymeric/Desktop/test_port/AymericBasset.github.io/src/hooks/useWindowSize.js"],"names":["useEffect","useState","breakpoints","useWindowSize","undefined","windowWidth","setWidth","windowHeight","setHeight","deviceType","setWindowType","getSize","window","innerWidth","innerHeight","width","height","startBigPhone","startTablet","startDesktop","addEventListener","removeEventListener"],"mappings":"8KAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CACA,OAASC,WAAT,KAA4B,iBAA5B,CAGA;AACA;AACA,GACA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,eACMF,QAAQ,CAACG,SAAD,CADd,wCACnBC,WADmB,eACNC,QADM,8BAEQL,QAAQ,CAACG,SAAD,CAFhB,yCAEnBG,YAFmB,eAELC,SAFK,8BAGUP,QAAQ,CAAC,SAAD,CAHlB,yCAGnBQ,UAHmB,eAGPC,aAHO,eAK1BV,SAAS,CAAC,UAAM,CACd,GAAMW,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,EAAM,UACI,CAACC,MAAM,CAACC,UAAR,CAAoBD,MAAM,CAACE,WAA3B,CADJ,CACbC,KADa,SACNC,MADM,YAEZC,CAAAA,aAFY,CAEgCf,WAFhC,CAEZe,aAFY,CAEGC,WAFH,CAEgChB,WAFhC,CAEGgB,WAFH,CAEgBC,YAFhB,CAEgCjB,WAFhC,CAEgBiB,YAFhB,CAIpBb,QAAQ,CAACS,KAAD,CAAR,CACAP,SAAS,CAACQ,MAAD,CAAT,CAEA,GAAID,KAAK,CAAGE,aAAZ,CAA2B,CACzBP,aAAa,CAAC,YAAD,CAAb,CACD,CAFD,IAEM,IAAIK,KAAK,CAAGG,WAAZ,CAAyB,CAC7BR,aAAa,CAAC,UAAD,CAAb,CACD,CAFK,IAEA,IAAIK,KAAK,CAAGI,YAAZ,CAA0B,CAC9BT,aAAa,CAAC,QAAD,CAAb,CACD,CAGF,CAhBD,CAiBAE,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,CAAkCT,OAAlC,EACAA,OAAO,GAEP,MAAO,WAAM,CACXC,MAAM,CAACS,mBAAP,CAA2B,QAA3B,CAAqCV,OAArC,EACD,CAFD,CAGD,CAxBQ,CAwBN,EAxBM,CAAT,CA0BA,MAAO,CAAEN,WAAW,CAAXA,WAAF,CAAeE,YAAY,CAAZA,YAAf,CAA6BE,UAAU,CAAVA,UAA7B,CAAP,CACD,CAhCD,CAkCA,cAAeN,CAAAA,aAAf","sourcesContent":["import { useEffect, useState } from \"react\"\nimport { breakpoints } from \"../styles/theme\"\n\n\n/**\n * Get the window height and width even when those sizes are changing\n */\nconst useWindowSize = () => {\n  const [windowWidth, setWidth] = useState(undefined)\n  const [windowHeight, setHeight] = useState(undefined)\n  const [deviceType, setWindowType] = useState('desktop')\n\n  useEffect(() => {\n    const getSize = () => {\n      const [width, height] = [window.innerWidth, window.innerHeight]\n      const { startBigPhone, startTablet, startDesktop} = breakpoints\n      \n      setWidth(width)\n      setHeight(height)\n\n      if (width < startBigPhone) {\n        setWindowType('smallPhone')\n      }else if (width < startTablet) {\n        setWindowType('bigPhone')\n      }else if (width < startDesktop) {\n        setWindowType('tablet')\n      }\n      \n\n    }\n    window.addEventListener('resize', getSize)\n    getSize()\n\n    return () => {\n      window.removeEventListener('resize', getSize)\n    }\n  }, [])\n\n  return { windowWidth, windowHeight, deviceType }\n}\n\nexport default useWindowSize"]},"metadata":{},"sourceType":"module"}